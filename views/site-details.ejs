<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= site.name %> - Uptime Monitor</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
  <style>
    :root {
      --primary: #5e72e4;
      --success: #2dce89;
      --danger: #f5365c;
      --warning: #fb6340;
      --dark: #32325d;
      --light: #f7fafc;
      --gray: #adb5bd;
      --light-gray: #f8f9fe;
      --dark-gray: #6c757d;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--light-gray);
      color: var(--dark);
      line-height: 1.6;
      overflow-x: hidden;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 15px;
    }
    
    header {
      background: linear-gradient(87deg, var(--primary) 0, #825ee4 100%);
      color: white;
      padding: 15px 0;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .logo {
      font-size: 1.5rem;
      font-weight: 700;
      display: flex;
      align-items: center;
    }
    
    .logo i {
      margin-right: 8px;
      font-size: 1.3rem;
    }
    
    .btn {
      display: inline-block;
      padding: 8px 16px;
      border-radius: 30px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      text-decoration: none;
      text-align: center;
      font-size: 0.9rem;
    }
    
    .btn-primary {
      background-color: var(--primary);
      color: white;
      border: none;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 7px 14px rgba(50, 50, 93, 0.1), 0 3px 6px rgba(0, 0, 0, 0.08);
    }
    
    .back-btn {
      display: inline-flex;
      align-items: center;
      margin: 15px 0;
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      font-size: 0.95rem;
    }
    
    .back-btn i {
      margin-right: 8px;
      font-size: 0.9rem;
    }
    
    .site-header-detail {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      display: flex;
      flex-direction: column;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
      animation: fadeIn 0.5s ease-out;
    }
    
    .site-name-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
    }
    
    .site-name {
      font-size: 1.3rem;
      font-weight: 600;
      display: flex;
      align-items: center;
    }
    
    .site-name i {
      margin-right: 8px;
      color: var(--gray);
      font-size: 1.2rem;
    }
    
    .status-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.9rem;
      font-weight: 600;
      white-space: nowrap;
    }
    
    .status-up {
      background-color: rgba(45, 206, 137, 0.1);
      color: var(--success);
    }
    
    .status-down {
      background-color: rgba(245, 54, 92, 0.1);
      color: var(--danger);
    }
    
    .status-unknown {
      background-color: rgba(251, 99, 64, 0.1);
      color: var(--warning);
    }
    
    .site-url {
      font-size: 0.95rem;
      color: var(--dark-gray);
      margin-top: 8px;
      display: block;
      word-break: break-all;
      padding-top: 12px;
      border-top: 1px solid #f0f0f0;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
      gap: 15px;
      margin-bottom: 25px;
    }
    
    .stat-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
      text-align: center;
      transition: transform 0.3s;
    }
    
    .stat-card:hover {
      transform: translateY(-3px);
    }
    
    .stat-card-value {
      font-size: 1.8rem;
      font-weight: 700;
      margin-bottom: 8px;
    }
    
    .stat-card-label {
      color: var(--gray);
      font-size: 0.9rem;
    }
    
    .chart-container {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 25px;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
      animation: fadeIn 0.5s ease-out 0.2s forwards;
      opacity: 0;
    }
    
    .chart-title {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 15px;
      color: var(--dark);
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .chart-title-text {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .chart-actions {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }
    
    .chart-btn {
      background: var(--light-gray);
      border: none;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.3s;
      white-space: nowrap;
    }
    
    .chart-btn.active {
      background: var(--primary);
      color: white;
    }
    
    .chart-wrapper {
      position: relative;
      height: 250px;
      width: 100%;
      margin-top: 15px;
    }
    
    .history-log {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
      animation: fadeIn 0.5s ease-out 0.3s forwards;
      opacity: 0;
    }
    
    .log-header {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    .log-header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .log-item {
      display: flex;
      padding: 12px 0;
      border-bottom: 1px solid #e1e5eb;
      flex-wrap: wrap;
      gap: 8px;
      align-items: center;
    }
    
    .log-status {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      flex-shrink: 0;
    }
    
    .status-up-bg { background-color: var(--success); }
    .status-down-bg { background-color: var(--danger); }
    
    .log-time {
      font-weight: 500;
      color: var(--dark);
      font-size: 0.9rem;
      min-width: 150px;
      flex-shrink: 0;
    }
    
    .log-url {
      color: var(--dark-gray);
      font-family: monospace;
      font-size: 0.85rem;
      overflow: hidden;
      text-overflow: ellipsis;
      flex: 1;
      min-width: 100px;
    }
    
    .log-response {
      display: flex;
      gap: 8px;
      flex-shrink: 0;
    }
    
    .status-code {
      padding: 3px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    
    .code-up { background-color: rgba(45, 206, 137, 0.1); color: var(--success); }
    .code-down { background-color: rgba(245, 54, 92, 0.1); color: var(--danger); }
    
    .response-time {
      background-color: rgba(94, 114, 228, 0.1);
      color: var(--primary);
      padding: 3px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    
    .empty-state {
      text-align: center;
      padding: 30px 0;
      color: var(--gray);
    }
    
    .empty-state i {
      font-size: 2.5rem;
      margin-bottom: 15px;
      opacity: 0.3;
    }
    
    .site-info-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 15px;
      margin-bottom: 25px;
    }
    
    .info-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
    }
    
    .info-title {
      font-size: 1rem;
      font-weight: 600;
      margin-bottom: 12px;
      color: var(--dark);
      display: flex;
      align-items: center;
    }
    
    .info-title i {
      margin-right: 8px;
      color: var(--primary);
      font-size: 1rem;
    }
    
    .info-item {
      display: flex;
      justify-content: space-between;
      padding: 8px 0;
      border-bottom: 1px solid #f0f0f0;
    }
    
    .info-label {
      color: var(--gray);
      font-size: 0.9rem;
    }
    
    .info-value {
      font-weight: 500;
      color: var(--dark);
      font-size: 0.9rem;
      text-align: right;
      max-width: 60%;
      word-break: break-word;
    }

    /* Animasi */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    .pulse {
      animation: pulse 2s infinite;
    }
    
    /* Responsif untuk mobile */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 10px;
      }
      
      .logo {
        font-size: 1.3rem;
      }
      
      .btn {
        width: 100%;
      }
      
      .site-header-detail {
        padding: 15px;
      }
      
      .site-name {
        font-size: 1.1rem;
      }
      
      .status-badge {
        font-size: 0.8rem;
        padding: 5px 10px;
      }
      
      .stat-card {
        padding: 15px;
      }
      
      .stat-card-value {
        font-size: 1.5rem;
      }
      
      .chart-container {
        padding: 15px;
      }
      
      .chart-wrapper {
        height: 200px;
      }
      
      .history-log {
        padding: 15px;
      }
      
      .log-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
      }
      
      .log-time {
        min-width: unset;
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .log-response {
        width: 100%;
        justify-content: flex-start;
      }
    }
    
    @media (max-width: 480px) {
      .stats-grid {
        grid-template-columns: 1fr 1fr;
      }
      
      .chart-title {
        font-size: 1rem;
      }
      
      .log-time {
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <div class="logo">
          <i class="fas fa-heartbeat"></i>
          <span>Uptime Monitor</span>
        </div>
        <a href="/" class="btn btn-primary">Dashboard</a>
      </div>
    </div>
  </header>
  
  <div class="container" style="padding-top:15px; padding-bottom:30px;">
    <a href="/" class="back-btn">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
    
    <div class="site-header-detail">
      <div class="site-name-container">
        <div class="site-name">
          <i class="fas fa-globe"></i>
          <span><%= site.name %></span>
        </div>
        <div class="status-badge status-<%= site.lastStatus || 'unknown' %>">
          <i class="fas fa-circle"></i> 
          <%= site.lastStatus === 'up' ? 'Operational' : 
              site.lastStatus === 'down' ? 'Down' : 'Unknown' %>
        </div>
      </div>
      <span class="site-url"><%= site.url %></span>
    </div>
    
    <div class="site-info-grid">
      <div class="info-card">
        <div class="info-title">
          <i class="fas fa-info-circle"></i> Site Information
        </div>
        <div class="info-item">
          <span class="info-label">ID:</span>
          <span class="info-value"><%= site.id %></span>
        </div>
        <div class="info-item">
          <span class="info-label">Created:</span>
          <span class="info-value"><%= new Date(site.createdAt).toLocaleString() %></span>
        </div>
        <div class="info-item">
          <span class="info-label">Last Check:</span>
          <span class="info-value"><%= site.lastCheck ? new Date(site.lastCheck).toLocaleString() : 'Never' %></span>
        </div>
        <div class="info-item">
          <span class="info-label">Total Checks:</span>
          <span class="info-value"><%= site.checks ? site.checks.length : 0 %></span>
        </div>
      </div>
      
      <div class="info-card">
        <div class="info-title">
          <i class="fas fa-history"></i> Monitoring History
        </div>
        <div class="info-item">
          <span class="info-label">First Check:</span>
          <span class="info-value">
            <% if (site.checks && site.checks.length > 0) { %>
              <%= new Date(site.checks[0].timestamp).toLocaleDateString() %>
            <% } else { %>
              N/A
            <% } %>
          </span>
        </div>
        <div class="info-item">
          <span class="info-label">Monitoring Duration:</span>
          <span class="info-value">
            <% if (site.checks && site.checks.length > 0) { %>
              <%= Math.floor((new Date() - new Date(site.checks[0].timestamp)) / (1000 * 60 * 60 * 24)) %> days
            <% } else { %>
              N/A
            <% } %>
          </span>
        </div>
        <div class="info-item">
          <span class="info-label">Last Down:</span>
          <span class="info-value">
            <% 
              if (site.checks && site.checks.length > 0) {
                const lastDown = [...site.checks].reverse().find(c => c.status === 'down');
                if (lastDown) {
            %>
                  <%= new Date(lastDown.timestamp).toLocaleString() %>
            <% 
                } else { 
            %>
                  Never
            <% 
                } 
              } else { 
            %>
                  N/A
            <% } %>
          </span>
        </div>
      </div>
    </div>
    
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-card-value"><%= stats.uptime24h %>%</div>
        <div class="stat-card-label">Uptime (24h)</div>
      </div>
      <div class="stat-card">
        <div class="stat-card-value"><%= stats.uptime7d %>%</div>
        <div class="stat-card-label">Uptime (7d)</div>
      </div>
      <div class="stat-card">
        <div class="stat-card-value"><%= stats.uptime30d %>%</div>
        <div class="stat-card-label">Uptime (30d)</div>
      </div>
      <div class="stat-card">
        <div class="stat-card-value"><%= stats.avgResponse %>ms</div>
        <div class="stat-card-label">Avg. Response</div>
      </div>
    </div>
    
    <div class="chart-container">
      <div class="chart-title">
        <div class="chart-title-text">
          <i class="fas fa-chart-line"></i> Uptime History
        </div>
        <div class="chart-actions">
          <button class="chart-btn active" data-period="7">7D</button>
          <button class="chart-btn" data-period="30">30D</button>
          <button class="chart-btn" data-period="90">90D</button>
        </div>
      </div>
      <div class="chart-wrapper">
        <canvas id="uptimeChart"></canvas>
      </div>
    </div>
    
    <div class="chart-container">
      <div class="chart-title">
        <div class="chart-title-text">
          <i class="fas fa-tachometer-alt"></i> Response Time History
        </div>
        <div class="chart-actions">
          <button class="chart-btn active" data-period="7">7D</button>
          <button class="chart-btn" data-period="30">30D</button>
          <button class="chart-btn" data-period="90">90D</button>
        </div>
      </div>
      <div class="chart-wrapper">
        <canvas id="responseChart"></canvas>
      </div>
    </div>
    
    <div class="history-log">
      <div class="log-header">
        <div class="log-header-content">
          <div class="section-title"><i class="fas fa-list"></i> Recent Checks</div>
          <div><strong><%= site.checks ? site.checks.length : 0 %></strong> checks total</div>
        </div>
      </div>
      
      <% if (site.checks && site.checks.length > 0) { %>
        <% site.checks.slice().reverse().slice(0, 10).forEach(check => { %>
          <div class="log-item">
            <div class="log-time">
              <div class="log-status <%= check.status === 'up' ? 'status-up-bg' : 'status-down-bg' %>"></div>
              <%= new Date(check.timestamp).toLocaleString() %>
            </div>
            <div class="log-url">
              <%= site.url %>
            </div>
            <div class="log-response">
              <span class="status-code <%= check.status === 'up' ? 'code-up' : 'code-down' %>">
                <%= check.statusCode %> HTTP
              </span>
              <span class="response-time">
                <%= check.responseTime %>ms
              </span>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <div class="empty-state">
          <i class="fas fa-search"></i>
          <h3>No check data available</h3>
          <p>Monitoring data will appear after the first check</p>
        </div>
      <% } %>
    </div>
  </div>

  <script>
    // Animasi untuk stat cards
    document.querySelectorAll('.stat-card').forEach((card, index) => {
      card.style.animation = `fadeIn 0.5s ease-out ${0.1 * index}s forwards`;
      card.style.opacity = '0';
    });
    
    // Setup Uptime Chart
    const uptimeCtx = document.getElementById('uptimeChart').getContext('2d');
    const responseCtx = document.getElementById('responseChart').getContext('2d');
    
    // Generate dummy data for charts
    function generateChartData(period) {
      const dates = [];
      const uptimeData = [];
      const responseData = [];
      
      const now = moment();
      
      for (let i = period - 1; i >= 0; i--) {
        const date = now.clone().subtract(i, 'days');
        dates.push(date.format('MMM D'));
        
        // Random uptime between 95-100%
        uptimeData.push((Math.random() * 5 + 95).toFixed(2));
        
        // Random response time between 100-500ms
        responseData.push(Math.floor(Math.random() * 400 + 100));
      }
      
      return { dates, uptimeData, responseData };
    }
    
    // Initialize charts
    let uptimeChart = new Chart(uptimeCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Uptime Percentage',
          data: [],
          borderColor: '#5e72e4',
          backgroundColor: 'rgba(94, 114, 228, 0.05)',
          borderWidth: 3,
          pointRadius: 0,
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            min: 90,
            max: 100,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            },
            ticks: {
              callback: function(value) {
                return value + '%';
              },
              font: {
                size: 10
              }
            }
          },
          x: {
            grid: {
              display: false
            },
            ticks: {
              font: {
                size: 10
              }
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            mode: 'index',
            intersect: false,
            callbacks: {
              label: function(context) {
                return context.dataset.label + ': ' + context.parsed.y.toFixed(2) + '%';
              }
            },
            titleFont: {
              size: 12
            },
            bodyFont: {
              size: 11
            }
          }
        }
      }
    });
    
    let responseChart = new Chart(responseCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Response Time (ms)',
          data: [],
          borderColor: '#2dce89',
          backgroundColor: 'rgba(45, 206, 137, 0.05)',
          borderWidth: 3,
          pointRadius: 0,
          tension: 0.4,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0, 0, 0, 0.05)'
            },
            ticks: {
              callback: function(value) {
                return value + 'ms';
              },
              font: {
                size: 10
              }
            }
          },
          x: {
            grid: {
              display: false
            },
            ticks: {
              font: {
                size: 10
              }
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            mode: 'index',
            intersect: false,
            callbacks: {
              label: function(context) {
                return context.dataset.label + ': ' + context.parsed.y + 'ms';
              }
            },
            titleFont: {
              size: 12
            },
            bodyFont: {
              size: 11
            }
          }
        }
      }
    });
    
    // Update charts with initial data (7 days)
    function updateCharts(period) {
      const data = generateChartData(period);
      
      // Update uptime chart
      uptimeChart.data.labels = data.dates;
      uptimeChart.data.datasets[0].data = data.uptimeData;
      uptimeChart.update();
      
      // Update response time chart
      responseChart.data.labels = data.dates;
      responseChart.data.datasets[0].data = data.responseData;
      responseChart.update();
    }
    
    // Initialize with 7 days data
    updateCharts(7);
    
    // Chart period buttons
    document.querySelectorAll('.chart-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        // Remove active class from all buttons
        this.parentNode.querySelectorAll('.chart-btn').forEach(b => {
          b.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Update charts
        const period = parseInt(this.dataset.period);
        updateCharts(period);
      });
    });
    
    // Status badge animation if down
    const statusBadge = document.querySelector('.status-badge');
    if (statusBadge.classList.contains('status-down')) {
      statusBadge.classList.add('pulse');
    }

    // Handle window resize
    let resizeTimeout;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(function() {
        uptimeChart.resize();
        responseChart.resize();
      }, 200);
    });
  </script>
</body>
</html>